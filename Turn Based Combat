<!DOCTYPE html>
<html>
<head>
<title>Page Title</title>
</head>
<style>
.enemy
{
  display: inline-block;
  margin: 50px;
  padding: 20px;
  border: 2px solid black;
  }
.Actions 
{
	display: auto;
    border: 2px solid black;
    overflow: scroll;
    width: 500px;
    height: 110px;

}
</style>
<body>
<div class = "enemybar" id = "enemybar">
<div class = "enemy">
<b>Bandit</b>
<p>HP: <span id ="HPa">100</span></p>
<button onclick="Attack(player, enemyOne)">Attack</button>
<p id = "weapon">Sword</p>
</div>
<div class = "enemy">
<b>Barbarian</b>
<p>HP: <span id ="HPb">200</span></p>
<button onclick="Attack(player, enemyTwo)">Attack</button>
<p id = "weapon">Axe</p>
</div>
<div class = "enemy">
<b>Wizard</b>
<p>HP: <span id ="HPc">50</span></p>
<button onclick="Attack(player, enemyThree)">Attack</button>
<p id = "weapon">Fireball</p>
</div>
<div class = "enemy">
<b>Archer</b>
<p>HP: <span id ="HPd">75</span></p>
<button onclick="Attack(player, enemyFour)">Attack</button>
<p id = "weapon">Bow</p>
</div>
</div>
<br><br>
<br><br>
<div class = "Actions">
<b id = "actionsText"></b>
</div>
<br><br>
<br><br>
<div class = "player">
<h4>Player</h4>
<p>HP: <span class = "PlayerHP">300</p>
<p id = "weapon">Sword</p>
<p id = "playerTurns">5</p>
<button onclick = "heal(player)">Heal (<span id = "healsLeft">2</span>)</button>
</div>
<p id = "test"></p>
<button onclick = "main()">Test Button</button>
</body>
<script>
var test = document.getElementById("test");
var playerTurns = document.getElementById("PlayerTurns");
var actionText = document.getElementById("actionsText");
var enemyOne;
var enemyTwo;
var enemyThree;
var enemyFour;
var sword;
var axe;
var fireball;
var bow;
var playerSword;
var player;
main()
function main()
{
    constructWeaponsPrototypes()
	constructCharacterPrototypes()
    
}
function character(inputname, inputhp, inputweapon, inputheals, inputnum, inputturns, inputMaxHP)
{
	this.name = inputname;
    this.hp = inputhp;
    this.weapon = inputweapon;
    this.heal = inputheals;
    this.num = inputnum;
    this.turns = inputturns;
    this.maxHP = inputMaxHP;
}
function weapon(inputName, inputMinDam, inputMaxDam)
{
	this.name = inputName;
    this.minDam = inputMinDam;
    this.maxDam = inputMaxDam;
}
function constructCharacterPrototypes()
{
	enemyOne = new character("Bandit", 100, sword, 1, 1, 3, 100);
    enemyTwo = new character("Barbarian", 200, axe, 0, 2, 2, 200);
    enemyThree = new character("Wizard", 50, fireball, 3, 3, 2, 50);
    enemyFour = new character("Archer", 75, bow, 2, 4, 4, 75);
    player = new character("Player", 300, playerSword, 2, 5, 5, 300);

}
function constructWeaponsPrototypes()
{
	sword = new weapon("sword", 10, 20);
    axe = new weapon("Axe", 10, 30);
    fireball = new weapon("Fireball", 15, 25);
    bow = new weapon("Bow", 20, 30);
    playerSword = new weapon("PlayerSword", 25, 40);
}
function heal(caller)
{
var healsCount = getHeals(caller);
if (getHeals(caller) > 0)
{
	var callerHP = getHP(caller);
    var newHP;
    	if (callerHP + 50 > caller.maxHP)
        {
        	newHP = caller.maxHP - getHP(caller)
        	setHP(caller, caller.maxHP)
        }
        else
        {
        	setHP(caller, callerHP + 50)
            newHP = 50;
}


setHeals(caller, healsCount - 1);
actionText.innerHTML += "* " + getName(caller) + " Used a healing potion and restored " + newHP + " HP" + "<br>";
}
else {
	actionText.innerHTML += "* You are out of healing potions" + "<br>";
}
	if (getName(caller) === "Player")
    {
    setTurns(player, getTurns(player) - 1)
    document.getElementById("healsLeft").innerHTML = getHeals(caller)
    }
}
function Attack(Attacker, Defender) {
	var Attackerweapon = Attacker.weapon
	var minDamage = getWeaponMin(Attackerweapon)
    var maxDamage = getWeaponMax(Attackerweapon)
	var Damage = Diceroll(minDamage, maxDamage)
    var isCrit = false;
    if (getHP(Defender) > 0)
    {
    var roll = Diceroll(5, 100)
    	if (roll <= 5)
        {
        	isCrit = true;
        	Damage = Damage * 2;
        }
        if (isCrit == true)
        {
        	actionText.innerHTML += "* " + getName(Attacker) + " Scored a critical hit on " + getName(Defender) + ", doing " + Damage + " Points of damage!" + "<br>"

        } else 
        {
                actionText.innerHTML += "* " + getName(Attacker) + " Scored a hit on " + getName(Defender) + ", doing " + Damage + " Points of damage!" + "<br>"

        }
        test.innerHTML = Damage
        setHP(Defender, Defender.hp - Damage);
        if (getName(Attacker) === "Player")
    {
    	setTurns(player, getTurns(player) - 1)
        document.getElementById("playerTurns").innerHTML = getTurns(player)
    }
    if (getNum(Defender) == 1) {
    	document.getElementById("HPa").innerHTML = getHP(Defender)
    } else if (getNum(Defender) == 2) {
        	document.getElementById("HPb").innerHTML = getHP(Defender)
	} else if (getNum(Defender) == 3) {
    	    document.getElementById("HPc").innerHTML = getHP(Defender)
    } else if (getNum(Defender) == 4) {
        	 document.getElementById("HPd").innerHTML = getHP(Defender)
    } else if (getNum(Defender) == 5) {
        	 document.getElementById("PlayerHP").innerHTML = getHP(Defender)
}
}else 
{
actionText += "* Opponant has already been defeated" + "<br>"
}
}



function Diceroll(min, max)
{
	return Math.floor(Math.random() * max) + min;
}

function wait(milliseconds) {
  //used for time in between NPC attacks
  var start = new Date().getTime();
  for (var i = 0; i < 1e7; i++) {
    if ((new Date().getTime() - start) > milliseconds){
      break;
    }
  }
}

//GETTERS AND SETTERS
function getName(nname) {
	return nname.name;
}
function setHP(name, newHP) {
	name.hp = newHP;
}
function getHP(name) {
	return name.hp;
}
function setHeals(name, healsCount) {
	name.heal = healsCount;
}
function getHeals(healsCount) {
	return healsCount.heal;
}
function getNum(name) {
	return name.num;
}
function getTurns(name) {
	return name.turns;
}
function setTurns(name, newTurns) {
	name.turns = newTurns;
}
function getWeapon(name)
{
	return name.weapon;
}
function getWeaponName(nname)
{
	return nname.name
}
function getWeaponMin(name)
{
	return name.minDam
}
function getWeaponMax(name)
{
	return name.maxDam
}
</script>
</html>
